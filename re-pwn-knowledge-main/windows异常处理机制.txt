发生错误或异常后，Windows的处理顺序一般如下：
（1）中止当前程序的执行。
（2）OS保存当前程序的状态，并将异常写入内存中的异常记录结构中
（3）OS根据异常记录结构中的信息搜索可以用来处理该异常的函数(4~8)
（4）如果程序处于被调试状态，向调试器发送EXCEPTION_DEBUG_EVENT消息。
（5）如果程序没有被调试或者调试器未能处理异常，查找线程相关的异常处理例程（如对应__except块）并处理。如果前面查找到的例程返回 EXCEPTION_CONTINUE_SEARCH，且线程有多个异常处理例程，则沿这些例程入口地址组成的链式结构逐一向后查找，请求下一个例程处理。
（6）如果线程没有对应的异常处理例程，或线程所有例程都返回EXCEPTION_CONTINUE_SEARCH，而且程序处于被调试状态，再次通知调试器。
（7）如果程序没有被调试或者调试器仍未处理异常，则进入主线程的“最终异常处理例程”链继续查找。
（8）“最终异常处理例程”链的最后是Windows默认的系统异常处理程序__CxxUnhandledExceptionFilter()，其处理通常是弹出一个异常对话框，上面显示一些异常信息，提供“关闭”、“调试”等按钮。
著 名的SetUnhandledExceptionFilter()函数就是在所谓“最终异常处理例程”链的 __CxxUnhandledExceptionFilter()之前插入一个自定义的异常处理例程，当这个例程返回 EXCEPTION_EXECUTE_HANDLER时，一般会直接结束进程。
 如果成功解决异常，则由异常处理函数恢复程序的上下文，恢复程序执行
 （可以参照以下的该文件夹目录下的windows.py代码（该代码将python异常转换成模拟的异常控制流）
